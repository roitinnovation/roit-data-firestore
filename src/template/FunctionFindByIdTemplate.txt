findById(id) {
    return __awaiter(this, void 0, void 0, function* () {
        let repositoryClassName = '';
        let methodSignature = '';
        const db = global.instances.globalDbFile.FirestoreInstance.getInstance();
        const cacheResolver = global.instances.cacheResolver;
        const archiveService = yield global.instances.archiveService;

        const result = yield cacheResolver.getCacheResult(repositoryClassName, methodSignature, id);
        if (result) {
            return result;
        }

        const collection = db.collection('<COLLECTION_REPLACE>');
        const environmentUtil = global.instances.environmentUtil;

        if (environmentUtil.areWeTesting()) {
            console.log('It was decreed that it is being executed try, no operation or effective transaction will be performed');
            return undefined;
        }

        const response = yield collection.doc(id).get();
        const item = response.data();

        // VERIFICAÇÃO DE ARQUIVAMENTO
        if (item && archiveService.isDocumentArchived(item)) {
            const archivedData = yield archiveService.getArchivedDocument('<COLLECTION_REPLACE>', item);
            if (archivedData) {
                const completeData = { ...item, ...archivedData };
                yield cacheResolver.cacheResult(repositoryClassName, methodSignature, completeData, id);
                return completeData;
            }
        }

        yield cacheResolver.cacheResult(repositoryClassName, methodSignature, item, id);
        const firestoreReadAuditResolver = global.instances.firestoreReadAuditResolver;
        yield firestoreReadAuditResolver.persistFirestoreRead({
            collection: '<COLLECTION_REPLACE>',
            repositoryClassName,
            functionSignature: methodSignature,
            params: id,
            queryResult: item
        });
        return item;
    });
}